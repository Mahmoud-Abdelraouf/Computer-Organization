$date
	Thu Dec 21 13:03:32 2023
$end
$version
	ModelSim Version 10.5b
$end
$timescale
	1ps
$end

$scope module InterruptRequestRegister_tb $end
$var reg 8 ! IR0_to_IR7 [7:0] $end
$var reg 8 " bitToMask [7:0] $end
$var reg 1 # readPriority $end
$var reg 1 $ readIRR $end
$var reg 3 % resetIRR [2:0] $end
$var wire 1 & risedBits [7] $end
$var wire 1 ' risedBits [6] $end
$var wire 1 ( risedBits [5] $end
$var wire 1 ) risedBits [4] $end
$var wire 1 * risedBits [3] $end
$var wire 1 + risedBits [2] $end
$var wire 1 , risedBits [1] $end
$var wire 1 - risedBits [0] $end
$var wire 1 . dataBuffer [7] $end
$var wire 1 / dataBuffer [6] $end
$var wire 1 0 dataBuffer [5] $end
$var wire 1 1 dataBuffer [4] $end
$var wire 1 2 dataBuffer [3] $end
$var wire 1 3 dataBuffer [2] $end
$var wire 1 4 dataBuffer [1] $end
$var wire 1 5 dataBuffer [0] $end
$var integer 32 6 num_random_test_cases $end
$var integer 32 7 i $end

$scope module irr_inst $end
$var wire 1 8 IR0_to_IR7 [7] $end
$var wire 1 9 IR0_to_IR7 [6] $end
$var wire 1 : IR0_to_IR7 [5] $end
$var wire 1 ; IR0_to_IR7 [4] $end
$var wire 1 < IR0_to_IR7 [3] $end
$var wire 1 = IR0_to_IR7 [2] $end
$var wire 1 > IR0_to_IR7 [1] $end
$var wire 1 ? IR0_to_IR7 [0] $end
$var wire 1 @ bitToMask [7] $end
$var wire 1 A bitToMask [6] $end
$var wire 1 B bitToMask [5] $end
$var wire 1 C bitToMask [4] $end
$var wire 1 D bitToMask [3] $end
$var wire 1 E bitToMask [2] $end
$var wire 1 F bitToMask [1] $end
$var wire 1 G bitToMask [0] $end
$var wire 1 H readPriority $end
$var wire 1 I readIRR $end
$var wire 1 J resetIRR [2] $end
$var wire 1 K resetIRR [1] $end
$var wire 1 L resetIRR [0] $end
$var reg 8 M risedBits [7:0] $end
$var reg 8 N dataBuffer [7:0] $end
$var reg 8 O interruptState [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10111000 !
b100110 "
0#
0$
b110 %
bz M
bx N
b10011000 O
b1010 6
bx 7
z-
z,
z+
z*
z)
z(
z'
z&
x5
x4
x3
x2
x1
x0
x/
x.
0L
1K
1J
0I
0H
0G
1F
1E
0D
0C
1B
0A
0@
0?
0>
0=
1<
1;
1:
09
18
$end
